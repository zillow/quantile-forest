
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_quantile_toy_example.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_quantile_toy_example.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_quantile_toy_example.py:


========================================================================
Quantile regression forest predictions compared to ground truth function
========================================================================

An example that demonstrates the use of a quantile regression forest to
predict a conditional median and prediction intervals. The example compares
the predictions to a ground truth function used to generate noisy samples.

.. GENERATED FROM PYTHON SOURCE LINES 11-70



.. image-sg:: /auto_examples/images/sphx_glr_plot_quantile_toy_example_001.png
   :alt: plot quantile toy example
   :srcset: /auto_examples/images/sphx_glr_plot_quantile_toy_example_001.png
   :class: sphx-glr-single-img





.. code-block:: Python


    print(__doc__)

    import matplotlib.pyplot as plt
    import numpy as np
    from sklearn.model_selection import train_test_split

    from quantile_forest import RandomForestQuantileRegressor


    def make_toy_dataset(n_samples, seed=0):
        rng = np.random.RandomState(seed)

        x = rng.uniform(0, 10, size=n_samples)
        f = x * np.sin(x)

        sigma = 0.25 + x / 10
        noise = rng.lognormal(sigma=sigma) - np.exp(sigma**2 / 2)
        y = f + noise

        return np.atleast_2d(x).T, y


    n_samples = 1000
    X, y = make_toy_dataset(n_samples)

    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)

    X_sampled = np.atleast_2d(np.linspace(0, 10, n_samples)).T
    y_sampled = X_sampled * np.sin(X_sampled)

    qrf = RandomForestQuantileRegressor(max_depth=3, min_samples_leaf=5, random_state=0)
    qrf.fit(X_train, y_train)

    y_pred = qrf.predict(X_sampled, quantiles=[0.025, 0.5, 0.975])


    def plot_fit_and_intervals(X_sampled, y_sampled, X_test, y_test, y_pred):
        y_pred_low = y_pred[:, 0]
        y_pred_med = y_pred[:, 1]
        y_pred_upp = y_pred[:, 2]

        plt.plot(X_test, y_test, ".", c="#f2a619", label="Test Observations", ms=5)
        plt.plot(X_sampled, y_sampled, c="black", label="$f(x) = x\\,\\sin(x)$", lw=2)
        plt.plot(X_sampled, y_pred_med, c="#006aff", label="Predicted Median", lw=3, ms=5)
        plt.fill_between(
            X_sampled.ravel(),
            y_pred_low,
            y_pred_upp,
            color="#e0f2ff",
            label="Predicted 95% Interval",
        )
        plt.xlabel("$x$")
        plt.ylabel("$f(x)$")
        plt.legend(loc="upper left")
        plt.show()


    plot_fit_and_intervals(X_sampled, y_sampled, X_test, y_test, y_pred)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.278 seconds)


.. _sphx_glr_download_auto_examples_plot_quantile_toy_example.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_quantile_toy_example.ipynb <plot_quantile_toy_example.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_quantile_toy_example.py <plot_quantile_toy_example.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
