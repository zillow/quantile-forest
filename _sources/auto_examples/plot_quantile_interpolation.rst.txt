
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_quantile_interpolation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_quantile_interpolation.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_quantile_interpolation.py:


========================================================
Predicting with different quantile interpolation methods
========================================================

An example comparison of interpolation methods that can be applied during
prediction when the desired quantile lies between two data points.

.. GENERATED FROM PYTHON SOURCE LINES 10-67



.. image-sg:: /auto_examples/images/sphx_glr_plot_quantile_interpolation_001.png
   :alt: plot quantile interpolation
   :srcset: /auto_examples/images/sphx_glr_plot_quantile_interpolation_001.png
   :class: sphx-glr-single-img





.. code-block:: default

    print(__doc__)

    import matplotlib.pyplot as plt
    import numpy as np

    from quantile_forest import RandomForestQuantileRegressor


    # Create toy dataset.
    X = np.array([[-1, -1], [-1, -1], [-1, -1], [1, 1], [1, 1]])
    y = np.array([-2, -1, 0, 1, 2])

    est = RandomForestQuantileRegressor(
        n_estimators=1,
        max_samples_leaf=None,
        bootstrap=False,
        random_state=0,
    )
    est.fit(X, y)

    interpolations = ["linear", "lower", "higher", "midpoint", "nearest"]
    colors = ["#eeca3b", "#4c78a8", "#72b7b2", "#54a24b", "#f58518"]

    y_medians = []
    y_errs = []

    for interpolation in interpolations:
        y_pred = est.predict(
            X,
            quantiles=[0.025, 0.5, 0.975],
            interpolation=interpolation,
        )
        y_medians.append(y_pred[:, 1])
        y_errs.append(np.concatenate((
            [y_pred[:, 1] - y_pred[:, 0]],
            [y_pred[:, 2] - y_pred[:, 1]],
        ), axis=0))

    sc = plt.scatter(np.arange(len(y)) - .35, y, color="k", zorder=10)
    ebs = []
    for i, (median, y_err) in enumerate(zip(y_medians, y_errs)):
        ebs.append(
            plt.errorbar(
                np.arange(len(y)) + (.15 * (i + 1)) - .35,
                median,
                yerr=y_err,
                color=colors[i],
                ecolor=colors[i],
                fmt="o",
            )
        )
    plt.xlim([-.75, len(y) - .25])
    plt.xticks(np.arange(len(y)), X.tolist())
    plt.xlabel("Samples (Feature Values)")
    plt.ylabel("Actual and Predicted Values")
    plt.legend([sc] + ebs, ["actual"] + interpolations, loc=2)
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.138 seconds)


.. _sphx_glr_download_auto_examples_plot_quantile_interpolation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_quantile_interpolation.py <plot_quantile_interpolation.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_quantile_interpolation.ipynb <plot_quantile_interpolation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
