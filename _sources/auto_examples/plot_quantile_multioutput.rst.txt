
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_quantile_multioutput.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_quantile_multioutput.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_quantile_multioutput.py:


===================================
Multiple-output quantile regression
===================================

An example on a toy dataset that demonstrates fitting a single quantile
regressor for multiple target variables. For each target, multiple quantiles
can be estimated simultaneously.

.. GENERATED FROM PYTHON SOURCE LINES 11-67



.. image-sg:: /auto_examples/images/sphx_glr_plot_quantile_multioutput_001.png
   :alt: Multi-target Prediction Intervals
   :srcset: /auto_examples/images/sphx_glr_plot_quantile_multioutput_001.png
   :class: sphx-glr-single-img





.. code-block:: Python


    print(__doc__)

    import matplotlib.pyplot as plt
    import numpy as np
    from sklearn.model_selection import train_test_split

    from quantile_forest import RandomForestQuantileRegressor

    np.random.seed(0)


    n_samples = 10000
    bounds = [-0, 25]
    funcs = [
        lambda x: np.sin(x) + np.sqrt(x),
        lambda x: np.cos(x),
        lambda x: np.sin(x) - np.sqrt(x),
    ]


    def make_Xy(funcs, bounds, n_samples):
        x = np.linspace(bounds[0], bounds[1], n_samples)
        y = np.empty((len(x), 3))
        y[:, 0] = funcs[0](x) + np.random.normal(scale=0.01 * np.abs(x))
        y[:, 1] = funcs[1](x) + np.random.normal(scale=0.01 * np.abs(x))
        y[:, 2] = funcs[2](x) + np.random.normal(scale=0.01 * np.abs(x))
        return x, y


    X, y = make_Xy(funcs, bounds, n_samples)
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=0)

    qrf = RandomForestQuantileRegressor(random_state=0)
    qrf.fit(X_train.reshape(-1, 1), y_train)

    y_pred = qrf.predict(X.reshape(-1, 1), quantiles=[0.025, 0.5, 0.975])


    def plot_multioutputs(colors, funcs, X, y):
        for i in range(y.shape[-1]):
            y1 = y_pred[:, 0, i]
            y2 = y_pred[:, 2, i]
            plt.fill_between(X, y1, y2, alpha=0.4, color=colors[i], label=f"Target {i}")
            plt.plot(X, funcs[i](X), c="black")
        plt.xlim(bounds)
        plt.ylim([-8, 8])
        plt.xlabel("$x$")
        plt.ylabel("$y$")
        plt.legend(loc="upper left")
        plt.title("Multi-target Prediction Intervals")
        plt.show()


    colors = ["#f2a619", "#006aff", "#001751"]
    plot_multioutputs(colors, funcs, X, y)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 3.830 seconds)


.. _sphx_glr_download_auto_examples_plot_quantile_multioutput.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_quantile_multioutput.ipynb <plot_quantile_multioutput.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_quantile_multioutput.py <plot_quantile_multioutput.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
