
:orphan:
:html_theme.sidebar_secondary.remove:

.. This document is auto-generated by the example-gallery extension. Do not modify directly.

.. _gallery_plot_quantile_vs_standard:


Quantile Regression Forests vs. Random Forests
==============================================

An example comparison between the estimates generated by a quantile regression
forest and a standard random forest regressor on a synthetic, right-skewed
dataset. In a right-skewed distribution, the mean is to the right of the
median. As illustrated by a greater overlap in the frequencies of the actual
and predicted values, the median estimated by a quantile regressor can be a
more reliable estimator of a skewed distribution than the mean.


.. altair-plot::
    :remove-code:
    


    import altair as alt
    import pandas as pd
    import scipy as sp
    from sklearn.ensemble import RandomForestRegressor
    from sklearn.model_selection import train_test_split
    from sklearn.utils.validation import check_random_state

    from quantile_forest import RandomForestQuantileRegressor

    rng = check_random_state(0)

    # Create right-skewed dataset.
    n_samples = 5000
    a, loc, scale = 5, -1, 1
    skewnorm_rv = sp.stats.skewnorm(a, loc, scale)
    skewnorm_rv.random_state = rng
    y = skewnorm_rv.rvs(n_samples)
    X = rng.randn(n_samples, 2) * y.reshape(-1, 1)

    regr_rf = RandomForestRegressor(n_estimators=10, random_state=0)
    regr_qrf = RandomForestQuantileRegressor(n_estimators=10, random_state=0)

    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)

    regr_rf.fit(X_train, y_train)
    regr_qrf.fit(X_train, y_train)

    y_pred_rf = regr_rf.predict(X_test)  # standard RF predictions (mean)
    y_pred_qrf = regr_qrf.predict(X_test, quantiles=0.5)  # QRF predictions (median)

    legend = {
        "Actual": "#c0c0c0",
        "RF (Mean)": "#f2a619",
        "QRF (Median)": "#006aff",
    }

    df = pd.DataFrame({"actual": y_test, "rf": y_pred_rf, "qrf": y_pred_qrf})


    def plot_prediction_histograms(df, legend):
        click = alt.selection_point(fields=["label"], bind="legend")

        color = alt.condition(
            click,
            alt.Color("label:N", sort=list(legend.keys()), title=None),
            alt.value("lightgray"),
        )

        chart = (
            alt.Chart(df)
            .transform_calculate(calculate=f"round({alt.datum['actual']} * 10) / 10", as_="Actual")
            .transform_calculate(calculate=f"round({alt.datum['rf']} * 10) / 10", as_="RF (Mean)")
            .transform_calculate(calculate=f"round({alt.datum['qrf']} * 10) / 10", as_="QRF (Median)")
            .transform_fold(["Actual", "RF (Mean)", "QRF (Median)"], as_=["label", "value"])
            .mark_bar()
            .encode(
                x=alt.X(
                    "value:O",
                    axis=alt.Axis(
                        labelAngle=0,
                        labelExpr="datum.value % 0.5 == 0 ? datum.value : null",
                    ),
                    title="Actual and Predicted Target Values",
                ),
                y=alt.Y("count():Q", axis=alt.Axis(format=",d", title="Counts")),
                color=color,
                xOffset=alt.XOffset("label:N"),
                tooltip=[
                    alt.Tooltip("label:N", title="Label"),
                    alt.Tooltip("value:O", title="Value (binned)"),
                    alt.Tooltip("count():Q", format=",d", title="Counts"),
                ],
            )
            .add_params(click)
            .configure_range(category=alt.RangeScheme(list(legend.values())))
            .properties(height=400, width=650)
        )
        return chart


    chart = plot_prediction_histograms(df, legend)
    chart


.. code:: python


            import altair as alt
            import pandas as pd
            import scipy as sp
            from sklearn.ensemble import RandomForestRegressor
            from sklearn.model_selection import train_test_split
            from sklearn.utils.validation import check_random_state

            from quantile_forest import RandomForestQuantileRegressor

            rng = check_random_state(0)

            # Create right-skewed dataset.
            n_samples = 5000
            a, loc, scale = 5, -1, 1
            skewnorm_rv = sp.stats.skewnorm(a, loc, scale)
            skewnorm_rv.random_state = rng
            y = skewnorm_rv.rvs(n_samples)
            X = rng.randn(n_samples, 2) * y.reshape(-1, 1)

            regr_rf = RandomForestRegressor(n_estimators=10, random_state=0)
            regr_qrf = RandomForestQuantileRegressor(n_estimators=10, random_state=0)

            X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)

            regr_rf.fit(X_train, y_train)
            regr_qrf.fit(X_train, y_train)

            y_pred_rf = regr_rf.predict(X_test)  # standard RF predictions (mean)
            y_pred_qrf = regr_qrf.predict(X_test, quantiles=0.5)  # QRF predictions (median)

            legend = {
                "Actual": "#c0c0c0",
                "RF (Mean)": "#f2a619",
                "QRF (Median)": "#006aff",
            }

            df = pd.DataFrame({"actual": y_test, "rf": y_pred_rf, "qrf": y_pred_qrf})


            def plot_prediction_histograms(df, legend):
                click = alt.selection_point(fields=["label"], bind="legend")

                color = alt.condition(
                    click,
                    alt.Color("label:N", sort=list(legend.keys()), title=None),
                    alt.value("lightgray"),
                )

                chart = (
                    alt.Chart(df)
                    .transform_calculate(calculate=f"round({alt.datum['actual']} * 10) / 10", as_="Actual")
                    .transform_calculate(calculate=f"round({alt.datum['rf']} * 10) / 10", as_="RF (Mean)")
                    .transform_calculate(calculate=f"round({alt.datum['qrf']} * 10) / 10", as_="QRF (Median)")
                    .transform_fold(["Actual", "RF (Mean)", "QRF (Median)"], as_=["label", "value"])
                    .mark_bar()
                    .encode(
                        x=alt.X(
                            "value:O",
                            axis=alt.Axis(
                                labelAngle=0,
                                labelExpr="datum.value % 0.5 == 0 ? datum.value : null",
                            ),
                            title="Actual and Predicted Target Values",
                        ),
                        y=alt.Y("count():Q", axis=alt.Axis(format=",d", title="Counts")),
                        color=color,
                        xOffset=alt.XOffset("label:N"),
                        tooltip=[
                            alt.Tooltip("label:N", title="Label"),
                            alt.Tooltip("value:O", title="Value (binned)"),
                            alt.Tooltip("count():Q", format=",d", title="Counts"),
                        ],
                    )
                    .add_params(click)
                    .configure_range(category=alt.RangeScheme(list(legend.values())))
                    .properties(height=400, width=650)
                )
                return chart


            chart = plot_prediction_histograms(df, legend)
            chart
